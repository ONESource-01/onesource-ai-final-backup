<analysis>
The previous AI engineer successfully brought the ONESource AI application from initial development to a refined state, addressing numerous UI/UX, chat interface, GBI, pricing, feedback, file upload, and subscription system issues. A persistent challenge was the consistent application of enhanced emoji mapping and professional text formatting, especially the  emoji for Mentoring Insight.

Initial attempts focused on fixing backend and frontend components, including , , and . Comprehensive testing revealed deep architectural inconsistencies between the regular and enhanced chat endpoints. After multiple iterative fixes proved insufficient, a Master Specification was introduced, detailing a complete architectural rebuild. This new plan, which is currently underway, aims to unify the entire AI interaction pipeline into a single code path within a new  directory, addressing all known bugs systematically. The most recent focus is implementing this new architecture, starting with creating the core modules and integrating them into the main .
</analysis>

<product_requirements>
The ONESource AI application aims to be an AI mentor and single point of truth for the AU/NZ construction industry, featuring Firebase authentication, Stripe payments, and OpenAI integration within a branded UI. The core problem is to deliver a polished, professional, and intelligently responsive AI platform. Key functionalities include a Knowledge Vault (Community/Personal), User Personalization, Global Business Identifier (GBI), and an enhanced Pricing Page. The project prioritizes resolving critical UI/UX and functional bugs identified during beta testing, such as missing UI elements, inconsistent AI response formatting (including precise emoji mapping and professional typography), broken search/purchase buttons, incorrect subscription statuses for Pro users, faulty Boost functionality, unresponsive feedback buttons, and failed file uploads. The application must also ensure overall professional text formatting, consistent font styles, boldness, line spacing, headers, dot points, and table layouts across all pricing tiers and response types, and now, support seamless multi-turn conversations.
</product_requirements>

<key_technical_concepts>
-   **Full-stack Architecture**: React.js (frontend), FastAPI (backend), MongoDB.
-   **Service Management**: backend                          RUNNING   pid 48, uptime 0:00:03
code-server                      RUNNING   pid 50, uptime 0:00:03
frontend                         RUNNING   pid 52, uptime 0:00:03
mongodb                          RUNNING   pid 56, uptime 0:00:03
supervisor>  for process control.
-   **Third-party Integrations**: Firebase (Authentication), Stripe (Payments), OpenAI (AI).
-   **AI/Data Engineering**: Retrieval-Augmented Generation (RAG), contextual prompting, 3-Phase AI Intelligence.
-   **UI/UX Frameworks**: Tailwind CSS, Shadcn/UI, React components, Markdown rendering, regex.
-   **Architectural Principles**: Single code path, unified response schema, master system prompt.
</key_technical_concepts>

<code_architecture>
The application follows a standard full-stack structure with  and  directories, and is currently undergoing a significant architectural overhaul into a new  structure.



-   ****: The core FastAPI backend, managing all API endpoints. Previously modified extensively to unify regular and enhanced chat endpoints and fix various bugs (trial counter, boost prefix). It is now being refactored to integrate the new unified  architecture, serving as the central hub for the new chat services.
-   ****: Contains legacy AI logic. It was previously modified to incorporate enhanced emoji mapping and structured output but is now slated for complete deletion as its functionality is superseded by the new .
-   ****: A temporary unified service that consolidated chat logic and added conversation history support. It will be replaced by the more robust  as part of the rebuild.
-   ****: The main chat UI. Modified to format AI responses with dynamic colors, professional typography, and styled lists/tables, and to correctly handle API responses for trial information and consistent formatting. It was also updated to improve markdown table rendering.
-   ** (NEW)**: Will contain the single, canonical system prompt template for all AI interactions across all tiers. Created to centralize prompt management.
-   ** (NEW)**: Defines the single, standardized Pydantic response model () that all AI chat endpoints will adhere to, ensuring consistent data structure across the platform. Created.
-   ** (NEW)**: Will encapsulate all logic for applying consistent emoji mapping, typography, spacing, lists, and table rendering rules to AI responses, ensuring uniform presentation. Created.
-   ** (NEW)**: Designed to manage conversation history effectively, including pre-saving conversation stubs and building context for multi-turn conversations, directly addressing the persistent conversation context bug. Created.
-   ** (NEW)**: This will be the central unified AI service, responsible for prompt building, calling the AI model, and processing responses according to the new schema and formatter. Created as the cornerstone of the rebuild.
-   ****: A custom Python script for enterprise-grade backend testing, crucial for validating emoji and response consistency during debugging and the rebuild.
</code_architecture>

<pending_tasks>
-   Complete the frontend unification according to the Master Spec (, , ).
-   Fully implement comprehensive conversation context within  (pre-save stub, entity resolution).
-   Perform comprehensive accessibility checks (WCAG 2.1 AA).
-   Implement advanced UX features (compact mode, micro-interactions, mobile table conversions, onboarding overlays).
-   Add partner trust visuals and error states for community knowledge.
-   Set up an automated visual QA system for frontend consistency.
-   Refine content review processes for individual user uploads to the Personal Knowledge Bank.
-   Make suggested chat questions dynamic/rotating.
-   Remove deprecated  and other legacy/duplicate logic.
-   Complete deployment with canary rollout and rollback toggle.
</pending_tasks>

<current_work>
Immediately before this summary request, the AI engineer commenced a comprehensive architectural rebuild of the ONESource AI application, following a detailed Master Specification provided by the user. This strategic pivot aims to establish a single, unified code path for all AI interactions, thereby resolving all previous inconsistencies and technical debt.

The current work focuses on setting up the new  directory in the  and creating its foundational modules:
1.  ****: Created, intended to hold the single, unified system prompt.
2.  ****: Created, defining the new  Pydantic model for consistent API responses.
3.  ****: Created, which will centralize all AI response formatting logic (emojis, sections, tables).
4.  ****: Created, designed to handle conversation history persistence and retrieval to fix the long-standing context bug.
5.  ****: Created, intended as the main unified service orchestrating AI interactions.
The next immediate step is to integrate these new  modules into the main FastAPI application, , by replacing all existing chat-related logic with calls to the new unified services. This will ensure both  and  endpoints utilize the same robust, consistent, and maintainable backend.
</current_work>

<optional_next_step>
Continue updating  to fully integrate the new  and remove all remaining legacy chat logic from both  and  endpoints.
</optional_next_step>
