#!/usr/bin/env python3
"""
Quick OpenAI API Integration Test
"""

import asyncio
import aiohttp
import json

async def test_openai_integration():
    print("üîç QUICK OPENAI API INTEGRATION TEST")
    print("=" * 50)
    
    async with aiohttp.ClientSession() as session:
        headers = {
            'Authorization': 'Bearer mock_dev_token',
            'Content-Type': 'application/json'
        }
        
        # Test 1: Basic construction question
        print("\n1. Testing basic construction question...")
        data = {
            'question': 'What are the minimum concrete strength requirements for a commercial building foundation according to AS 3600?',
            'session_id': 'test_basic'
        }
        
        async with session.post('http://localhost:8001/api/chat/ask', json=data, headers=headers) as response:
            result = await response.json()
            response_text = str(result.get('response', ''))
            
            is_mock = 'development mock response' in response_text or 'mock implementation' in response_text
            has_as3600 = 'AS 3600' in response_text or 'AS3600' in response_text
            has_concrete = 'concrete' in response_text.lower()
            has_strength = 'strength' in response_text.lower()
            
            print(f"   Mock response: {'‚ùå Yes' if is_mock else '‚úÖ No'}")
            print(f"   AS 3600 reference: {'‚úÖ Yes' if has_as3600 else '‚ùå No'}")
            print(f"   Concrete content: {'‚úÖ Yes' if has_concrete else '‚ùå No'}")
            print(f"   Strength content: {'‚úÖ Yes' if has_strength else '‚ùå No'}")
            print(f"   Response length: {len(response_text)} chars")
            
            basic_success = not is_mock and has_as3600 and has_concrete and len(response_text) > 300
            print(f"   Result: {'‚úÖ PASS' if basic_success else '‚ùå FAIL'}")
        
        # Test 2: Complex technical question
        print("\n2. Testing complex technical question...")
        data = {
            'question': 'How do I calculate wind loads for a 10-story office building in Sydney according to AS/NZS 1170.2?',
            'session_id': 'test_complex'
        }
        
        async with session.post('http://localhost:8001/api/chat/ask', json=data, headers=headers) as response:
            result = await response.json()
            response_text = str(result.get('response', ''))
            
            is_mock = 'development mock response' in response_text or 'mock implementation' in response_text
            has_wind_standard = 'AS/NZS 1170.2' in response_text or 'AS 1170.2' in response_text
            has_calculation = 'calculat' in response_text.lower()
            has_sydney = 'sydney' in response_text.lower()
            
            print(f"   Mock response: {'‚ùå Yes' if is_mock else '‚úÖ No'}")
            print(f"   Wind standard ref: {'‚úÖ Yes' if has_wind_standard else '‚ùå No'}")
            print(f"   Calculation content: {'‚úÖ Yes' if has_calculation else '‚ùå No'}")
            print(f"   Sydney reference: {'‚úÖ Yes' if has_sydney else '‚ùå No'}")
            print(f"   Response length: {len(response_text)} chars")
            
            complex_success = not is_mock and has_calculation and len(response_text) > 400
            print(f"   Result: {'‚úÖ PASS' if complex_success else '‚ùå FAIL'}")
        
        # Test 3: Enhanced chat with knowledge integration
        print("\n3. Testing enhanced chat...")
        data = {
            'question': 'What fire rating requirements apply to structural steel in commercial buildings?',
            'session_id': 'test_enhanced'
        }
        
        try:
            async with session.post('http://localhost:8001/api/chat/ask-enhanced', json=data, headers=headers) as response:
                if response.status == 200:
                    result = await response.json()
                    response_content = result.get('response', {})
                    knowledge_enhanced = result.get('knowledge_enhanced', False)
                    
                    print(f"   Status: ‚úÖ 200 OK")
                    print(f"   Knowledge enhanced: {'‚úÖ Yes' if knowledge_enhanced else '‚ö†Ô∏è No'}")
                    print(f"   Response type: {type(response_content)}")
                    
                    enhanced_success = response.status == 200
                    print(f"   Result: {'‚úÖ PASS' if enhanced_success else '‚ùå FAIL'}")
                else:
                    print(f"   Status: ‚ùå {response.status}")
                    print(f"   Result: ‚ùå FAIL")
                    enhanced_success = False
        except Exception as e:
            print(f"   Error: ‚ùå {e}")
            print(f"   Result: ‚ùå FAIL")
            enhanced_success = False
        
        # Overall assessment
        print("\n" + "=" * 50)
        print("OVERALL ASSESSMENT:")
        
        if basic_success and complex_success:
            print("üéâ SUCCESS: OpenAI API integration is working with real AI responses!")
            print("‚úÖ Construction domain expertise confirmed")
            print("‚úÖ Australian standards references working")
            print("‚úÖ Technical content generation successful")
            print("‚úÖ System ready for production use")
            return True
        else:
            print("‚ö†Ô∏è PARTIAL SUCCESS: Some issues detected")
            if not basic_success:
                print("‚ùå Basic construction questions need improvement")
            if not complex_success:
                print("‚ùå Complex technical questions need improvement")
            if not enhanced_success:
                print("‚ö†Ô∏è Enhanced chat may have issues")
            return False

if __name__ == "__main__":
    success = asyncio.run(test_openai_integration())
    exit(0 if success else 1)